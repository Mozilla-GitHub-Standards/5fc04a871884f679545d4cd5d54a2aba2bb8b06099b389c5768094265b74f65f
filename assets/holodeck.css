/* Global Styles */

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
  background: linear-gradient(to bottom right, #1a1b1f, #000);
  font-family: 'Fira Sans', 'Helvetica', sans-serif;
  font-size: 16px;
  /* see https://www.mozilla.org/en-US/styleguide/identity/mozilla/color/ */
  color: #D7D3C8;

  display: flex;
  align-items: center;
  justify-content: center;
}

.MainWindow {
  width: 100%;
  height: 100%;
  display: flex;
}

/* VideoWindow */

.VideoWindow {
  overflow: hidden;
  position: relative;
  background: black;
}
.VideoWindow > video {
  object-fit: cover; /* only in chrome/firefox for now */
  width: 100%;
  height: 100%;
}

.VideoWindow .stillFrame {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  display: none;
}
.VideoWindow .overlay {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  opacity: 0;
  transition: opacity 500ms ease;
  background: black;
}

.VideoWindow.idle .stillFrame {
  display: block;
}
.VideoWindow.idle .overlay {
  opacity: 0.5;
}

.VideoWindow.peer-view {
  z-index: 1;
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

.peer-count-2 .peer-view { width: 50%; }
.peer-count-2 .peer-view.index-1 { left: 50%; }

.peer-count-3 .peer-view { width: 50%; height: 50%; }
.peer-count-3 .peer-view.index-1 { left: 50%; }
.peer-count-3 .peer-view.index-2 { top: 50%; }

.peer-count-4 .peer-view { width: 50%; height: 50%; }
.peer-count-4 .peer-view.index-1 { left: 50%; }
.peer-count-4 .peer-view.index-2 { top: 50%; }
.peer-count-4 .peer-view.index-3 { left: 50%; top: 50%; }

.VideoWindow.self-view {
  z-index: 2;
  border-radius: 5px;
  position: absolute;
  bottom: 15px;
  right: 15px;
  width: 256px;
  height: 144px;
  box-shadow: 5px 5px 20px black;
  transition: opacity 500ms ease;
}
.peer-count-0 .self-view {
  opacity: 0; /* Hide the self-view when no one's connected. */
}

/* Transitions (for ReactCSSTransitionGroup) */

.fade-appear, .fade-enter {
  opacity: 0;
}
.fade-appear-active, .fade-enter-active, .fade-leave {
  opacity: 1;
}
.fade-leave-active {
  opacity: 0;
}
.fade-appear-active, .fade-enter-active, .fade-leave-active {
  transition: opacity 1s ease;
}

/* Loading Panel / Status Text */

/* Hide the loading panel whenever peers are connected. */
.LoadingPanel {
  opacity: 0;
  transition: opacity 500ms ease;
}
:not(.peer-count-0) .LoadingPanel {
  opacity: 1;
}

/* The statusText is animated by two elements changing on top of one another
   using ReactCSSTransitionGroup, hence the absolute positioning. */
.LoadingPanel .statusTextContainer {
  position: relative;
}
.LoadingPanel .statusText {
  position: absolute;
  top: 0;
  width: 100%;
  text-align: center;
  font-style: italic;
}
.LoadingPanel .holodeck-logo {
  display: block;
  margin-bottom: 4rem;
  width: 300px;
  height: auto;
}

/* Whenever the statusText changes, don't show the new one for a moment.
   This allows the loading screen to not show any text unless it's taking
   an unusually long time to connect. */
.fade-enter-active.statusText {
  transition-delay: 1s;
}
/* Similarly, wait a moment before showing the initial status. */
.statusTextContainer.fade-appear-active {
  transition-delay: 2s;
}

/* Toolbar */

.toolbar {
  z-index: 2;
  position: absolute;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.8);
  overflow: hidden;
  text-transform: uppercase;
  font-size: 11px;
  text-align: right;
  border-top-left-radius: 7px;
}

.toolbar .enabled img {
  border-bottom: 2px solid green;
}
.toolbar .disabled img {
  border-bottom: 2px solid #d00;
}

.toolbar a {
  cursor: pointer;
}

.toolbar .disabled {
  position: relative;
}
.toolbar .disabled::before {
    background: url('/assets/slash.svg') center / cover no-repeat;
    content: '';
    position: absolute;
    width: 18px;
    height: 18px;
    top: -19px;
    left: 6px;
    z-index: 1;
}

.toolbar img {
  display: inline-block;
  height: 20px;
  width: 20px;
  padding: 0 0px;
  margin: 5px;
  padding-bottom: 2px;
}

/* Addons */

/* This is temporary, for debugging. */
.detectedFace {
  position: absolute;
  z-index: 1;
  border: 1px solid #fff;
  opacity: 0.5;
  border-radius: 5px;
  transition: all 500ms ease;
}
